From 7d23ecd0d8aed0f7ec11221f5cc305d6ccff656a Mon Sep 17 00:00:00 2001
From: Jonas Albrecht <plonkbong100@protonmail.com>
Date: Sun, 19 Jan 2020 16:27:59 +0000
Subject: [PATCH] net: lantiq_xrx200: add fixed link definitions
X-Patchwork-Bot: notify

This is a common approach to define links in
drivers/net/ethernet/lantiq_xrx200.c as fixed.
Currently only dts definition is supported.

This is required for connecting to second switches or WiSocs in some
Routers like Arcadyan VGV952CJW33-E-IR

Co-Developed-by: Holger Foerster <Hamsi2k@freenet.de>
Signed-off-by: Holger Foerster <Hamsi2k@freenet.de>
Acked-by: Jonas Albrecht <plonkbong100@protonmail.com>
Signed-off-by: Jonas Albrecht <plonkbong100@protonmail.com>
---
 drivers/net/ethernet/lantiq_xrx200.c | 63 ++++++++++++++++++++++++------------
 1 file changed, 43 insertions(+), 20 deletions(-)

diff --git a/drivers/net/ethernet/lantiq_xrx200.c b/drivers/net/ethernet/lantiq_xrx200.c
index 90306b7..67600a6 100644
--- a/drivers/net/ethernet/lantiq_xrx200.c
+++ b/drivers/net/ethernet/lantiq_xrx200.c
@@ -1377,31 +1377,43 @@ static int xrx200_mdio_probe(struct net_device *dev, struct xrx200_port *port)
 	struct phy_device *phydev = NULL;
 	unsigned val;
 
-	phydev = mdiobus_get_phy(priv->hw->mii_bus, port->phy_addr);
+	if (of_phy_is_fixed_link(port->phy_node)) {
+		netdev_info(dev, "Connect as fixed link.\n");
+		phydev = of_phy_connect(dev, port->phy_node, &xrx200_mdio_link, 0,
+				port->phy_if);
 
-	if (!phydev) {
-		netdev_err(dev, "no PHY found\n");
-		return -ENODEV;
-	}
+		if (IS_ERR(phydev)) {
+			netdev_err(dev, "Could not attach to PHY\n");
+			return PTR_ERR(phydev);
+		}
+	}else{
+		netdev_info(dev, "Connect as common phy link.\n");
+		phydev = mdiobus_get_phy(priv->hw->mii_bus, port->phy_addr);
+		if (!phydev) {
+			netdev_err(dev, "no PHY found\n");
+			return -ENODEV;
+		}
 
-	phydev = phy_connect(dev, phydev_name(phydev), &xrx200_mdio_link,
-				port->phy_if);
+		phydev = phy_connect(dev, phydev_name(phydev), &xrx200_mdio_link,
+					port->phy_if);
 
-	if (IS_ERR(phydev)) {
-		netdev_err(dev, "Could not attach to PHY\n");
-		return PTR_ERR(phydev);
+		if (IS_ERR(phydev)) {
+			netdev_err(dev, "Could not attach to PHY\n");
+			return PTR_ERR(phydev);
+		}
+
+		phydev->supported &= (SUPPORTED_10baseT_Half
+				| SUPPORTED_10baseT_Full
+				| SUPPORTED_100baseT_Half
+				| SUPPORTED_100baseT_Full
+				| SUPPORTED_1000baseT_Half
+				| SUPPORTED_1000baseT_Full
+				| SUPPORTED_Autoneg
+				| SUPPORTED_MII
+				| SUPPORTED_TP);
+		phydev->advertising = phydev->supported;
 	}
 
-	phydev->supported &= (SUPPORTED_10baseT_Half
-			| SUPPORTED_10baseT_Full
-			| SUPPORTED_100baseT_Half
-			| SUPPORTED_100baseT_Full
-			| SUPPORTED_1000baseT_Half
-			| SUPPORTED_1000baseT_Full
-			| SUPPORTED_Autoneg
-			| SUPPORTED_MII
-			| SUPPORTED_TP);
-	phydev->advertising = phydev->supported;
 	port->phydev = phydev;
 	phydev->phy_link_change = xrx200_phy_link_change;
 
@@ -1688,6 +1700,17 @@ static void xrx200_of_port(struct xrx200_priv *priv, struct device_node *port)
 
 	memset(p, 0, sizeof(struct xrx200_port));
 	p->phy_node = of_parse_phandle(port, "phy-handle", 0);
+
+	if (!p->phy_node && of_phy_is_fixed_link(port)) {
+		pr_info("Static link. Port <%d>!\n", p->num);
+		if (of_phy_register_fixed_link(port)<0){
+			pr_info("invalid fixed-link\n");
+		}else{
+			pr_info("Registered fixed-link\n");
+		}
+		p->phy_node = of_node_get(port);
+	}
+
 	addr = of_get_property(p->phy_node, "reg", NULL);
 	if (!addr)
 		return;
-- 
2.7.4

